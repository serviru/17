import telebot
from telebot import types
import sqlite3
import os
from datetime import datetime
import time


API_TOKEN = '6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU'
bot = telebot.TeleBot(API_TOKEN)





def send_welcome(message):
    welcome_text = (
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!\n\n'
        '–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:\n\n'
        '- /main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
        '- /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ —É–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n'
        '- /weather - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã\n'
        '- /incidents - —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è—Ö\n\n'
        '–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ —Å–∫—Ä–µ–ø–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª: photo\n, '
        '–∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–π —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n'
        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" –Ω–∏–∂–µ.'
    )
    bot.send_message(message.chat.id, welcome_text)

def send_weather_info(message):
    weather_link = 'https://yandex.ru/pogoda?lat=63.71604156&lon=66.66759491'
    #weather_link = 'https://www.ventusky.com/?p=64.9;12.1;3&l=temperature-2m&t=20240501/20&src=link'
    weather_keyboard = types.InlineKeyboardMarkup()
    weather_keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã", url=weather_link))
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã', reply_markup=weather_keyboard)

def send_incidents_info(message):
    incidents_channel_link = 'https://t.me/+5qJpWu1gaakyMzVi'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    incidents_keyboard = types.InlineKeyboardMarkup()
    incidents_keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –°–≤—è–∑—å –û–±—â–∞—è", url=incidents_channel_link))
    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –°–≤—è–∑—å –û–±—â–∞—è:', reply_markup=incidents_keyboard)

@bot.message_handler(commands=['help', 'weather', 'main', 'incidents'])
def command_handler(message):
    if message.text == '/help':
        send_welcome(message)
    elif message.text == '/weather':
        send_weather_info(message)
    elif message.text == '/main':
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot.send_message(message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.')
    elif message.text == '/incidents':
        send_incidents_info(message)





# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    first_name TEXT,
                    last_name TEXT,
                    username TEXT,
                    profile_photo TEXT,
                    status TEXT,
                    role TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS objects (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    name TEXT,
                    completed INTEGER,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    c.execute('''CREATE TABLE IF NOT EXISTS photos (
                    id INTEGER PRIMARY KEY,
                    object_id INTEGER,
                    photo_id TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_users():
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users;")
    users = c.fetchall()
    conn.close()
    return users

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
def get_all_objects():
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM objects;")
    objects = c.fetchall()
    conn.close()
    return objects


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üóÑ –†–∞–±–æ—Ç–∞ —Å –ë–î"
@bot.message_handler(func=lambda message: message.text == "üóÑ –†–∞–±–æ—Ç–∞ —Å –ë–î")
def handle_db_work(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    markup.add("üë§ –í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    markup.add("üì¶ –í—ã–≤–µ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç—ã", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å")
    markup.add("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üë§ –í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def show_users(message):
    chat_id = message.chat.id
    users = get_all_users()
    
    if not users:
        bot.send_message(chat_id, "üö´ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    response = "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    
    for user in users:
        user_id, first_name, last_name, username, profile_photo, status, role = user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        username_display = f"@{username}" if username else "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        full_name = f"{first_name} {last_name}".strip() or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        user_info = (
            f"üîπ ID: {user_id}\n"
            f"üîπ –ò–º—è: {full_name}\n"
            #f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username_display}\n"
            f"üîπ –†–æ–ª—å: {role}\n\n"
        )
        
        response += user_info

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
        with open('users.txt', 'w', encoding='utf-8') as file:
            file.write(response)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        save_button = types.KeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(save_button, back_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        bot.send_message(chat_id, response + "\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.message_handler(func=lambda message: message.text == "üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
def send_file_users(message):
    chat_id = message.chat.id
    try:
        with open('users.txt', 'rb') as file:
            bot.send_document(chat_id, file)
    except FileNotFoundError:
        bot.send_message(chat_id, "üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        bot.send_message(chat_id, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def delete_user(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    bot.register_next_step_handler(message, confirm_delete_user)

def confirm_delete_user(message):
    user_id = message.text.strip()
    
    if not user_id.isdigit():
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    c.execute("SELECT role FROM users WHERE id = ?", (user_id,))
    result = c.fetchone()
    
    if result:
        role = result[0]
        if role == 'admin':
            bot.send_message(message.chat.id, "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é 'admin' —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.")
            conn.close()
            return
        
        # –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ 'admin', —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            c.execute("DELETE FROM users WHERE id = ?", (user_id,))
            conn.commit()
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    conn.close()


# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == "üì¶ –í—ã–≤–µ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç—ã")
def show_objects(message):
    chat_id = message.chat.id
    objects = get_all_objects()
    
    if not objects:
        bot.send_message(chat_id, "üö´ –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    response = "–í—Å–µ –æ–±—ä–µ–∫—Ç—ã:\n"
    for obj in objects:
        obj_id, user_id, name, completed, created_at = obj
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        
        response += f"ID: {obj_id}, \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}, \n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}, \n–°—Ç–∞—Ç—É—Å: {status}, –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª
    with open('objects.txt', 'w', encoding='utf-8') as file:
        file.write(response)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    save_button = types.KeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –æ–±—ä–µ–∫—Ç–∞–º–∏")
    back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(save_button, back_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
    bot.send_message(chat_id, response + "\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –æ–±—ä–µ–∫—Ç–∞–º–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –æ–±—ä–µ–∫—Ç–∞–º–∏")
def send_file_objects(message):
    chat_id = message.chat.id
    try:
        with open('objects.txt', 'rb') as file:
            bot.send_document(chat_id, file)
    except FileNotFoundError:
        bot.send_message(chat_id, "üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã.")
    except Exception as e:
        bot.send_message(chat_id, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
'''
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_markup())

def main_menu_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üë§ –í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
               types.KeyboardButton("üì¶ –í—ã–≤–µ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç—ã"))
    return markup
'''
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å")
def change_role(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
    bot.register_next_step_handler(message, ask_new_role)

def ask_new_role(message):
    user_id = message.text.strip()
    
    if not user_id.isdigit():
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏
    bot.register_next_step_handler(message, confirm_change_role, user_id)

def confirm_change_role(message, user_id):
    new_role = message.text.strip()
    
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    
    try:
        c.execute("UPDATE users SET role = ? WHERE id = ?", (new_role, user_id))
        conn.commit()
        
        if c.rowcount > 0:
            bot.send_message(message.chat.id, f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{new_role}'.")
        else:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏: {str(e)}")
    
    conn.close()

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message): # type: ignore
    show_main_menu(message.chat.id)



def register_user(user_id, first_name, last_name, username, profile_photo, status, role): # type: ignore
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("""
            INSERT INTO users (id, first_name, last_name, username, profile_photo, status, role)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (user_id, first_name, last_name, username, profile_photo, status, role))
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è
    last_name = message.from_user.last_name if message.from_user.last_name else ''  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None
    username = message.from_user.username if message.from_user.username else ''  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None
    profile_photo = get_profile_photo(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    status = ''  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞

    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE id=?", (user_id,))
        
        if not c.fetchone():  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∏–Ω-–∫–æ–¥:")
            bot.register_next_step_handler(message, check_pin, user_id, first_name, last_name, username, profile_photo, status)
        else:
            bot.reply_to(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            show_main_menu(message.chat.id)
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
    finally:
        conn.close()

def get_profile_photo(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç URL –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    photos = bot.get_user_profile_photos(user_id)
    
    if photos.total_count > 0:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é)
        file_id = photos.photos[0][-1].file_id  # type: ignore # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        return file_id  # –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å file_id –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    return ''  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

def check_pin(message, user_id, first_name, last_name, username, profile_photo, status):
    pin_code = message.text.strip()
    role = None

    if pin_code == '0450':
        role = 'admin'
    elif pin_code == '0000':
        role = 'user'
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∏–Ω-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE id=?", (user_id,))
        
        if not c.fetchone():  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            register_user(user_id, first_name, last_name, username, profile_photo, status, role)
            bot.reply_to(message, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role}!")
            show_main_menu(message.chat.id)
        else:
            bot.reply_to(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            show_main_menu(message.chat.id)
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω-–∫–æ–¥–∞: {e}")
    finally:
        conn.close()

def register_user(user_id, first_name, last_name, username, profile_photo, status, role):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute("INSERT INTO users (id, first_name, last_name, username, profile_photo, status, role) VALUES (?, ?, ?, ?, ?, ?, ?)",
                  (user_id, first_name, last_name, username, profile_photo, status, role))
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()



def get_user_role(chat_id):
    conn = sqlite3.connect('bot_database.db')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    
    cursor.execute("SELECT role FROM users WHERE id=?", (chat_id,))
    result = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    conn.close()
    
    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        return None  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

def show_main_menu(chat_id):
    user_role = get_user_role(chat_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üìÑ –û—Å–º–æ—Ç—Ä", "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "üîç –ü–æ–∏—Å–∫")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üóÑ –†–∞–±–æ—Ç–∞ —Å –ë–î" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_role == 'admin':
        markup.add("üóÑ –†–∞–±–æ—Ç–∞ —Å –ë–î")

    #return markup  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    
    bot.send_message(chat_id, "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üåü", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_object(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì¶–ü–†–°-10", "üì¶–ü–†–°-11", "‚ú®–£–†–°-12", "üì¶–ü–†–°-13", "üì¶–£—Ç—Ç –∏ –°—Ç", "üì° –£–∑–µ–ª —Å–≤—è–∑–∏",  "üåü –ö–° 5 - 7", "üåü –ö–° 3 - 4", "üè¢ –î–∏—Ä–µ–∫—Ü–∏—è")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=markup)
@bot.message_handler(func=lambda message: message.text in ["üì¶–ü–†–°-10", "üì¶–ü–†–°-11", "‚ú®–£–†–°-12", "üì¶–ü–†–°-13", "üì¶–£—Ç—Ç –∏ –°—Ç", "üì° –£–∑–µ–ª —Å–≤—è–∑–∏", "üåü –ö–° 5 - 7", "üåü –ö–° 3 - 4", "üè¢ –î–∏—Ä–µ–∫—Ü–∏—è"])
def choose_object(message):
    bot.send_message(message.chat.id, "üì∏–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, process_photo_step, message.text)

def process_photo_step(message, object_name):
    if message.content_type != 'photo':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞.")
        return

    photo_id = message.photo[-1].file_id  # –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ photo
    save_object_step(message, object_name, photo_id)

def save_object_step(message, object_name, photo_id):
    user_id = message.from_user.id

    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        
        c.execute("INSERT INTO objects (user_id, name, completed) VALUES (?, ?, ?)",
                  (user_id, object_name, 0))
        
        object_id = c.lastrowid
        
        c.execute("INSERT INTO photos (object_id, photo_id) VALUES (?, ?)", (object_id, photo_id))
        
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞.")
    finally:
        conn.close()

    bot.send_message(message.chat.id, "–û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    show_main_menu(message.chat.id)


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ITEMS_PER_PAGE = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ



@bot.message_handler(func=lambda message: message.text == "üìÑ –û—Å–º–æ—Ç—Ä")
def view_objects(message):
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''
            SELECT o.id, o.name, o.created_at, u.first_name 
            FROM objects o 
            LEFT JOIN users u ON o.user_id = u.id 
            WHERE o.completed = 0
        ''')
        objects = c.fetchall()
        
        if not objects:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
            show_main_menu(message.chat.id)
            return
        
        markup = types.InlineKeyboardMarkup()
        
        for obj in objects:
            object_id = obj[0]
            name = obj[1]
            created_at = obj[2]
            first_name = obj[3] if obj[3] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"  # –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
            date_format = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
            full_date = date_format.strftime('%d %B')  # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞: –¥–µ–Ω—å –º–µ—Å—è—Ü
            
            # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            button_text = (f" {name} \n"
                           f"üîñ ID: {object_id}\n"
                           #f"üìÖ –°–æ–∑–¥–∞–Ω: {full_date}\n"
                           )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä–∞–∑–º–µ—Ç–∫—É
            markup.add(types.InlineKeyboardButton(text=button_text, callback_data=f"view_{object_id}"))
        
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:", reply_markup=markup)
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤.")
    finally:
        conn.close()




@bot.callback_query_handler(func=lambda call: call.data.startswith("view_"))
def view_object_details(call):
    object_id = call.data.split("_")[1]
    
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        c.execute("SELECT name, created_at FROM objects WHERE id=?", (object_id,))
        obj = c.fetchone()
        
        if obj:
            name = obj[0]  # –ò–º—è –æ–±—ä–µ–∫—Ç–∞
            created_at = obj[1]  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
            date_format = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
            full_date = date_format.strftime('%d %B %Y')  # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞: –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥
            
            bot.send_message(call.message.chat.id, f"{name}\n–°–æ–∑–¥–∞–Ω–æ: {full_date}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –∏ –¥–∞—Ç—É
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            c.execute("SELECT photo_id FROM photos WHERE object_id=?", (object_id,))
            photos = c.fetchall()
            
            for photo in photos:
                bot.send_photo(call.message.chat.id, photo[0])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º photo_id –Ω–∞–ø—Ä—è–º—É—é

            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = call.from_user.id
            c.execute("SELECT role FROM users WHERE id=?", (user_id,))
            user_role = c.fetchone()
            
            markup = types.InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            
            markup.add(
                types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{object_id}"),
                types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_{object_id}"),
                types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_objects")  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "back_to_objects"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å", –µ—Å–ª–∏ —Ä–æ–ª—å 'admin'
            if user_role and user_role[0] == 'admin':
                markup.add(types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{object_id}"))

            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±—ä–µ–∫—Ç–∞: {e}")
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_objects")
def back_to_objects(call):
    view_objects(call.message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ view_objects —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º



@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def edit_object(call):
    object_id = call.data.split("_")[1]
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    bot.send_message(call.message.chat.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:")
    bot.register_next_step_handler(call.message, process_new_photo_step, object_id)

def process_new_photo_step(message, object_id):
    if message.content_type != 'photo':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞.")
        return

    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path) # type: ignore
        
        photo_path = f"photos/{file_info.file_path.split('/')[-1]}" # type: ignore
        
        with open(photo_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        
        c.execute("INSERT INTO photos (object_id, photo_id) VALUES (?, ?)", (object_id, message.photo[-1].file_id))
        conn.commit()
        
        bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ.")
    finally:
        conn.close()
    
    show_main_menu(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("complete_")) # –ö–ù–û–ü–ö–ê –≤—ã–ø–æ–ª–Ω–∏—Ç—å
def complete_object(call):
    object_id = call.data.split("_")[1]
    
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç
        c.execute("SELECT id FROM objects WHERE id=?", (object_id,))
        if not c.fetchone():
            bot.send_message(call.message.chat.id, "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        c.execute("UPDATE objects SET completed=1 WHERE id=?", (object_id,))
        conn.commit()
        
        bot.send_message(call.message.chat.id, "–û–±—ä–µ–∫—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!")
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –æ–±—ä–µ–∫—Ç–∞.")
    finally:
        conn.close()
    
    show_main_menu(call.message.chat.id)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))# –£–î–ê–õ–ï–ù–ò–ï –û–ë–¨–ï–ö–¢–û–í
def delete_object(call):
    object_id = call.data.split("_")[1]
    
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç
        c.execute("SELECT id FROM objects WHERE id=?", (object_id,))
        if not c.fetchone():
            bot.send_message(call.message.chat.id, "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        c.execute("DELETE FROM photos WHERE object_id=?", (object_id,))
        c.execute("DELETE FROM objects WHERE id=?", (object_id,))
        
        conn.commit()
        
        bot.send_message(call.message.chat.id, "–û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω!")
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞.")
    finally:
        conn.close()
    
    show_main_menu(call.message.chat.id)

@bot.message_handler(func=lambda message: message.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
def completed_objects(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    
    # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ç–∞–∫–∂–µ –ø–æ–ª–µ created_at
    c.execute("SELECT id, name, created_at FROM objects WHERE completed=1")
    objects = c.fetchall()
    
    if not objects:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        show_main_menu(message.chat.id)
        return
    
    markup = types.InlineKeyboardMarkup()
    
    for obj in objects:
        object_id = obj[0]
        name = obj[1]
        created_at = obj[2]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
        date_format = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
        full_date = date_format.strftime('%d %B')  # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞: –¥–µ–Ω—å –º–µ—Å—è—Ü
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –æ–±—ä–µ–∫—Ç–∞ –∏ –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
        button_text = (f" {name} \n"
                           f"üîñ ID: {object_id}\n"
                           #f"üìÖ –°–æ–∑–¥–∞–Ω: {full_date}\n"
                           )
        markup.add(types.InlineKeyboardButton(text=button_text, callback_data=f"completed_{object_id}"))
    
    bot.send_message(message.chat.id, "–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("completed_"))
def completed_object_details(call):
    object_id = call.data.split("_")[1]
    
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
        c.execute("SELECT name, created_at FROM objects WHERE id=?", (object_id,))
        obj = c.fetchone()
        
        if obj:
            name = obj[0]  # –ò–º—è –æ–±—ä–µ–∫—Ç–∞
            created_at = obj[1]  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
            date_format = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
            full_date = date_format.strftime('%d %B %Y')  # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞: –¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥
            
            bot.send_message(call.message.chat.id, f"{name}\n–°–æ–∑–¥–∞–Ω–æ: {full_date}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –∏ –¥–∞—Ç—É
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            c.execute("SELECT photo_id FROM photos WHERE object_id=?", (object_id,))
            photos = c.fetchall()
            
            if photos:
                for photo in photos:
                    photo_id = photo[0]
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ –ø—Ä—è–º–æ–º—É –ø—É—Ç–∏
                        bot.send_photo(call.message.chat.id, photo_id)
                    except Exception as e:
                        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            else:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.")
        else:
            bot.send_message(call.message.chat.id, "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞.")
    finally:
        conn.close()



@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
def search_objects(message):
    object_list = [
        "üì¶ –ü–†–°-10",
        "üì¶ –ü–†–°-11",
        "‚ú® –£–†–°-12",
        "üì¶ –ü–†–°-13",
        "üì¶ –£—Ç—Ç –∏ –°—Ç",
        "üì° –£–∑–µ–ª —Å–≤—è–∑–∏",
        "üåü –ö–° 5 - 7",
        "üåü –ö–° 3 - 4",
        "üè¢ –î–∏—Ä–µ–∫—Ü–∏—è"
    ]
    
    formatted_object_list = "\n".join([f"{i + 1}. {obj}" for i, obj in enumerate(object_list)])
    
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç 1 –¥–æ 9 \n\n –≥–¥–µ 1  —ç—Ç–æ –ü–†–°-10 :  \n\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:\n\n{formatted_object_list}")
    bot.register_next_step_handler(message, process_search_step, object_list)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –ø–æ–∏—Å–∫–∞
def process_search_step(message, object_list):
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –ø–æ–∏—Å–∫":
        search_objects(message)
        return
    elif message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        show_main_menu(message.chat.id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        return

    try:
        choice = int(message.text.strip())
        
        if 1 <= choice <= len(object_list):
            selected_object = object_list[choice - 1]
            search_query = selected_object.split(" ")[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
            conn = sqlite3.connect('bot_database.db')
            c = conn.cursor()

            c.execute("SELECT id, name, created_at FROM objects WHERE name LIKE ?", (f'%{search_query}%',))
            results = c.fetchall()

            if not results:
                bot.send_message(message.chat.id, "–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                show_main_menu(message.chat.id)
                return

            markup = types.InlineKeyboardMarkup()
            response_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"

            for obj in results:
                object_id = obj[0]
                name = obj[1]
                created_at = obj[2]
                
                date_format = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
                full_date = date_format.strftime('%d %B')
                
                button_text = (f"{name}\n"
                               f"üîñ ID: {object_id}\n"
                               #f"üìÖ –°–æ–∑–¥–∞–Ω: {full_date}"
                               )
                
                markup.add(types.InlineKeyboardButton(text=button_text, callback_data=f"completed_{object_id}"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –ø–æ–∏—Å–∫" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø–æ–∏—Å–∫")
            main_menu_button = types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(back_button, main_menu_button)

            bot.send_message(message.chat.id, response_message.strip(), reply_markup=markup)
            bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=back_markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
            search_objects(message)

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞.")
        search_objects(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –ø–æ–∏—Å–∫"
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –ø–æ–∏—Å–∫")
def back_to_search(message):
    search_objects(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    show_main_menu(message.chat.id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é


    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è")
def user_messages(message):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ñ–∞–º–∏–ª–∏—è–º–∏
    c.execute("SELECT last_name FROM users")
    users_list = c.fetchall()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ñ–∞–º–∏–ª–∏–∏:\n"

    for user in users_list:
        last_name = user[0]
        message_text += f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
        markup.add(last_name)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    markup.add("–û—Ç–º–µ–Ω–∞")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.send_message(message.chat.id, message_text, reply_markup=markup)
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text.strip() != "" and not message.text.isdigit())
def view_messages_by_last_name(message):
    last_name_to_search = message.text.strip()
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω–æ–π —Ñ–∞–º–∏–ª–∏–µ–π
    c.execute("SELECT id FROM users WHERE last_name=?", (last_name_to_search,))
    user_row = c.fetchone()
    
    if not user_row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_id_to_search = user_row[0]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ñ–∞–º–∏–ª–∏–∏

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute("SELECT id, name, description FROM objects WHERE user_id=?", (user_id_to_search,))
    objects = c.fetchall()

    if not objects:
        bot.send_message(message.chat.id, "–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –æ–±—ä–µ–∫—Ç–µ
    for object_id, object_name, description in objects:
        bot.send_message(message.chat.id, f"–û–±—ä–µ–∫—Ç: {object_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É
        c.execute("SELECT photo_id FROM photos WHERE object_id=?", (object_id,))
        photos_rows = c.fetchall()

        if photos_rows:
            for photo in photos_rows:
                bot.send_photo(message.chat.id, photo[0])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        else:
            bot.send_message(message.chat.id, "–§–æ—Ç–æ: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")

    show_main_menu(message.chat.id)
    conn.close()




@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
def cancel(message):
   show_main_menu(message.chat.id)

def main():
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º



if __name__ == '__main__':
   bot.polling(none_stop=True)



'''

import os
import sqlite3
from telebot import TeleBot, types
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_menu())

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–û—Ç–º–µ–Ω–∞')
    return markup

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, 
                     '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!nn–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:n/main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—én/help - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—ån/weather - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã')

@bot.message_handler(func=lambda message: message.text in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–û—Ç–º–µ–Ω–∞'])
def handle_menu_option(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        show_object_selection(message)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        show_object_selection_for_view(message)
    elif message.text == '–í—ã–ø–æ–ª–Ω–µ–Ω–æ':
        show_object_selection_for_completion(message)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        start(message)

def show_object_selection(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for obj in object_names.keys():
        markup.add(obj)
    markup.add('–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in object_names.keys())
def handle_object_selection(message):
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
    bot.register_next_step_handler(message, handle_photo_upload, message.text)

@bot.message_handler(content_types=['photo'])
def handle_photo_upload(message, object_name):
    if message.photo:
        file_id = message.photo[-1].file_id
        photo_id = add_photo(file_id)
        
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ:")
        bot.register_next_step_handler(message, lambda msg: save_item(msg, object_name, photo_id))
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.")
        bot.register_next_step_handler(message, handle_photo_upload, object_name)

def save_item(message, object_name, photo_id):
    user_id = message.from_user.id
    message_text = message.text
    add_item(object_name, photo_id, message_text, user_id)
    bot.send_message(message.chat.id, "–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())

def show_object_selection_for_view(message):
    markup = InlineKeyboardMarkup(row_width=3)
    for obj in object_names.keys():
        markup.add(InlineKeyboardButton(text=obj, callback_data=f"view_{obj}_1"))
    markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('view_'))
def handle_view_object(call):
    object_name, page = call.data.split('_')[1], int(call.data.split('_')[2])
    
    items_per_page = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 2 –æ–±—ä–µ–∫—Ç–∞ –∑–∞ —Ä–∞–∑
    conn = get_db_connection()
    
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM items WHERE object_name = ? AND user_id = ?", (object_name, call.from_user.id))
    total_items = cursor.fetchone()[0]
    
    cursor.execute("SELECT items.id AS item_id, items.message, photos.file_id FROM items JOIN photos ON items.photo_id = photos.id WHERE object_name = ? AND user_id = ? LIMIT ? OFFSET ?", 
                   (object_name, call.from_user.id, items_per_page, (page - 1) * items_per_page))
    items = cursor.fetchall()
    
    if items:
        for item in items:
            item_id, description, photo_id = item
            bot.send_photo(call.message.chat.id, photo_id, caption=description)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        pagination_markup = InlineKeyboardMarkup()
        if page > 1:
            pagination_markup.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_{object_name}_{page-1}"))
        if total_items > page * items_per_page:
            pagination_markup.add(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"view_{object_name}_{page+1}"))
        
        bot.send_message(call.message.chat.id, "–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=pagination_markup)
    else:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.")
    
    bot.answer_callback_query(call.id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
def show_completed_items(message):
    conn = get_db_connection()
    
    cursor = conn.cursor()
    
    cursor.execute("SELECT items.id AS item_id, items.message, photos.file_id FROM items JOIN photos ON items.photo_id = photos.id WHERE user_id = ?", (message.from_user.id,))
    
    items = cursor.fetchall()
    
    if items:
        for i in range(0, len(items), 3):  # –ü–æ 1 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä—è–¥
            row_markup = InlineKeyboardMarkup(row_width=2)
            for j in range(2):
                if i + j < len(items):
                    item = items[i + j]
                    item_id = item[0]
                    description = item[1]
                    photo_id = item[2]
                    row_markup.add(InlineKeyboardButton(text=f"–û–±—ä–µ–∫—Ç {item_id}", callback_data=f"view_completed_{item_id}"))
                    bot.send_photo(message.chat.id, photo_id, caption=description)
            bot.send_message(message.chat.id, "–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=row_markup)
        
        bot.send_message(message.chat.id, "–í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('view_completed_'))
def handle_view_completed(call):
    item_id = int(call.data.split('_')[2])
    
    conn = get_db_connection()
    
    cursor = conn.cursor()
    
    cursor.execute("SELECT message, photos.file_id FROM items JOIN photos ON items.photo_id = photos.id WHERE items.id = ?", (item_id,))
    
    item = cursor.fetchone()
    
    if item:
        description = item[0]
        photo_id = item[1]
        
        bot.send_photo(call.message.chat.id, photo_id, caption=description)
        
        bot.answer_callback_query(call.id)
    else:
        bot.send_message(call.message.chat.id, "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
def show_object_selection_for_completion(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for obj in object_names.keys():
        markup.add(obj)
    markup.add('–ù–∞–∑–∞–¥', '–û—Ç–º–µ–Ω–∞')  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in object_names.keys() and message.text != '–ù–∞–∑–∞–¥' and message.text != '–û—Ç–º–µ–Ω–∞')
def handle_completion_selection(message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—ä–µ–∫—Ç: {message.text}. –û–±—ä–µ–∫—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!")
    
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é:", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == '–û—Ç–º–µ–Ω–∞')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
def handle_cancel(message):
    bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
object_names = {
    'PRS-10': '–ü–†–°-10',
    'PRS-11': '–ü–†–°-11',
    'UPRS-12': '–£–†–°-12',
    'PRS-13': '–ü–†–°-13',
    'KS-5-7': '–ö–° 5 - 7',
    'UTT-and-ST': '–£—Ç—Ç –∏ –°—Ç'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_tables():
    conn = get_db_connection()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                chat_id INTEGER
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT UNIQUE
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_name TEXT,
                photo_id INTEGER,
                message TEXT,
                user_id INTEGER,
                FOREIGN KEY (photo_id) REFERENCES photos(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)

def add_user(username, chat_id):
    conn = get_db_connection()
    with conn:
        try:
            conn.execute("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, chat_id))
        except sqlite3.IntegrityError:
            pass

def add_photo(file_id):
    conn = get_db_connection()
    with conn:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO photos (file_id) VALUES (?)", (file_id,))
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            cursor.execute("SELECT id FROM photos WHERE file_id = ?", (file_id,))
            return cursor.fetchone()[0]

def add_item(object_name, photo_id, message, user_id):
    conn = get_db_connection()
    try:
        with conn:
            conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                         (object_name, photo_id, message, user_id))
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            time.sleep(0.5)
            with conn:
                conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                             (object_name, photo_id, message, user_id))
        else:
            raise e

if __name__ == '__main__':
    create_tables()
    bot.polling(none_stop=True)

#==================================================================================

import os
import sqlite3
from timeit import main
from telebot import TeleBot, types
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

bot = TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')


@bot.message_handler(commands=['hellp', 'weather', 'main'])
def command_handler(message):
    if message.text == '/hellp':
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!\n\n–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/hellp - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å\n/weather - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã\n\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞\n –∑–Ω–∞—á—ë–∫ —Å–∫—Ä–µ–ø–∫–∏, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–∏–ª: photo'
                                          '\n–∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Å—é–¥–∞ —Ñ–æ—Ç–æ\n –∏–∑ –≥–∞–ª–µ—Ä–µ–π —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    elif message.text == '/weather':
        weather_link = 'https://yandex.ru/weather/?lat=63.71604156&lon=66.66759491&via=ssc'
        weather_keyboard = InlineKeyboardMarkup()
        weather_keyboard.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã", url=weather_link))
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã', reply_markup=weather_keyboard)
    elif message.text == '/main':
        main(message)



# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
object_names = {
    '–ü–†–°-10': '–ü–†–°-10',
    '–ü–†–°-11': '–ü–†–°-11',
    '–£–†–°-12': '–£–†–°-12',
    '–ü–†–°-13': '–ü–†–°-13',
    '–ö–° 5 - 7': '–ö–° 5 - 7',
    '–£—Ç—Ç –∏ –°—Ç': '–£—Ç—Ç –∏ –°—Ç'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_tables():
    conn = get_db_connection()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                chat_id INTEGER
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT UNIQUE
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_name TEXT,
                photo_id INTEGER,
                message TEXT,
                user_id INTEGER,
                FOREIGN KEY (photo_id) REFERENCES photos(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)

def add_user(username, chat_id):
    conn = get_db_connection()
    with conn:
        try:
            conn.execute("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, chat_id))
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass

def add_photo(file_id):
    conn = get_db_connection()
    with conn:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO photos (file_id) VALUES (?)", (file_id,))
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–µ–º –µ–µ ID
            cursor.execute("SELECT id FROM photos WHERE file_id = ?", (file_id,))
            return cursor.fetchone()[0]


def add_item(object_name, photo_id, message, user_id):
    conn = get_db_connection()
    try:
        with conn:
            conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                         (object_name, photo_id, message, user_id))
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            time.sleep(0.5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            with conn:
                conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                             (object_name, photo_id, message, user_id))
        else:
            raise e


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user = bot.get_chat(message.chat.id)
    user_id = get_user_id(message.chat.id)
    if not user_id:
        add_user(user.username, message.chat.id)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

def get_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in ['–î–æ–±–∞–≤–∏—Ç—å',  '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–û—Ç–º–µ–Ω–∞']]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(func=lambda message: message.text in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–û—Ç–º–µ–Ω–∞'])
def handle_menu_option(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        show_object_selection(message)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        show_look_menu(message)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        start(message)

def show_object_selection(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    keyboard.add(*buttons)

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_selected_object)

def process_selected_object(message):
    selected_object = message.text
    for key, value in object_names.items():
        if value == selected_object:
            object_name = key
            break
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(msg, lambda m: process_message(m, object_name))

def process_message(message, object_name):
    message_text = message.text
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, lambda m: process_photo(m, object_name, message_text))

def process_photo(message, object_name, message_text):
    if message.photo:
        file_id = message.photo[-1].file_id
        photo_id = add_photo(file_id)
        user_id = get_user_id(message.chat.id)
        add_item(object_name, photo_id, message_text, user_id)
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ.")

def show_look_menu(message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(name, callback_data=name) for name in object_names.values()]
    buttons.append(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)



@bot.callback_query_handler(func=lambda call: True)
def look_data(call):
    if call.data == "cancel":
        start(call.message)
    else:
        user_id = get_user_id(call.message.chat.id)
        if user_id:
            for key, value in object_names.items():
                if value == call.data:
                    object_name = key
                    break
            filter_data_by_object(call.message, object_name)
        else:
            bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
    bot.answer_callback_query(call.id)

def filter_data_by_object(message, object_name):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT i.object_name, i.message, p.file_id FROM items i LEFT JOIN photos p ON i.photo_id = p.id WHERE i.object_name = ? AND i.user_id = ?", (object_name, get_user_id(message.chat.id)))
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                if row[2]:
                    bot.send_photo(message.chat.id, row[2], caption=f"{row[0]}\n{row[1]}")
                else:
                    bot.send_message(message.chat.id, f"{row[0]}\n–§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ó–∞–º–µ—á–∞–Ω–∏–µ: {row[1]}")
        else:
            bot.send_message(message.chat.id, f"–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}'.")

def filter_data_by_user(message, user_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT i.object_name, i.message, p.file_id FROM items i LEFT JOIN photos p ON i.photo_id = p.id WHERE i.user_id = ?", (user_id,))
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                if row[2]:
                    bot.send_photo(message.chat.id, row[2], caption=f"{row[0]}\n{row[1]}")
                else:
                    bot.send_message(message.chat.id, f"{row[0]}\n–§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ó–∞–º–µ—á–∞–Ω–∏–µ: {row[1]}")
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

def get_user_id(chat_id):
    conn = get_db_connection()

    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (chat_id,))
        row = cursor.fetchone()
        if row:
            return row[0]
        else:
            return None

if __name__ == '__main__':
    create_tables()
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    while True:
        try:
            bot.polling(non_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            time.sleep(10)




#–±–∞–∑–æ–≤—ã –∫–æ–¥
#===========================================================================
#55.32
import os
import sqlite3
from telebot import TeleBot, types
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')
#bot = TeleBot('6992737528:AAEhRgiVOQOtfb0m9RCXbej74r9MP6FaOjQ')


@bot.message_handler(commands=['help', 'weather'])
def command_handler(message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!
    help - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å
    /weather - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã

    –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞
    –∑–∞–ø—É—Å–∫ –∏–ª–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –≤ menu
    """
    if message.text == '/help':
        bot.send_message(message.chat.id, command_handler.__doc__) # type: ignore
    elif message.text == '/weather':
        weather_link = 'https://yandex.ru/weather/?lat=63.71604156&lon=66.66759491&via=ssc'
        weather_keyboard = InlineKeyboardMarkup()
        weather_keyboard.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã", url=weather_link))
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã', reply_markup=weather_keyboard)




# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
object_names = {
    '–ü–†–°-10': '–ü–†–°-10',
    '–ü–†–°-11': '–ü–†–°-11',
    '–£–†–°-12': '–£–†–°-12',
    '–ü–†–°-13': '–ü–†–°-13',
    '–ö–°-5-7': '–ö–° 5 - 7',
    '–£—Ç—Ç –∏ –°—Ç': '–£—Ç—Ç –∏ –°—Ç',
          
    '–î—Ä—É–≥–∏–µ –æ–±—å–µ–∫—Ç—ã': '–î—Ä—É–≥–∏–µ –æ–±—å–µ–∫—Ç—ã'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_tables():
    conn = get_db_connection()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                chat_id INTEGER
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT UNIQUE
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_name TEXT,
                photo_id INTEGER,
                message TEXT,
                user_id INTEGER,
                FOREIGN KEY (photo_id) REFERENCES photos(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)

def add_user(username, chat_id):
    conn = get_db_connection()
    with conn:
        try:
            conn.execute("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, chat_id))
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass

def add_photo(file_id):
    conn = get_db_connection()
    with conn:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO photos (file_id) VALUES (?)", (file_id,))
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–µ–º –µ–µ ID
            cursor.execute("SELECT id FROM photos WHERE file_id = ?", (file_id,))
            return cursor.fetchone()[0]


def add_item(object_name, photo_id, message, user_id):
    conn = get_db_connection()
    try:
        with conn:
            conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                         (object_name, photo_id, message, user_id))
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            time.sleep(0.5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            with conn:
                conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                             (object_name, photo_id, message, user_id))
        else:
            raise e


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user = bot.get_chat(message.chat.id)
    user_id = get_user_id(message.chat.id)
    if not user_id:
        add_user(user.username, message.chat.id)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

def get_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in ['–î–æ–±–∞–≤–∏—Ç—å',  '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–û—Ç–º–µ–Ω–∞']]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(func=lambda message: message.text in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–û—Ç–º–µ–Ω–∞'])
def handle_menu_option(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        show_object_selection(message)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        show_look_menu(message)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        start(message)

def show_object_selection(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    keyboard.add(*buttons)

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_selected_object)

def process_selected_object(message):
    selected_object = message.text
    for key, value in object_names.items():
        if value == selected_object:
            object_name = key
            break
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(msg, lambda m: process_message(m, object_name))

def process_message(message, object_name):
    message_text = message.text
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, lambda m: process_photo(m, object_name, message_text))


def process_photo(message, object_name, message_text):
    if message.photo:
        file_id = message.photo[-1].file_id
        photo_id = add_photo(file_id)
        user_id = get_user_id(message.chat.id)
        add_item(object_name, photo_id, message_text, user_id)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–º–æ–π"
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_home = types.KeyboardButton("–î–æ–º–æ–π")
        keyboard.add(button_home)
        start(message)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=keyboard)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π"
        bot.register_next_step_handler(message, start)
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ.")




def show_look_menu(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    buttons.append(types.KeyboardButton("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã"))
    #buttons.append(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))  # –ó–∞–º–µ–Ω—è–µ–º "–î–æ–º–æ–π" –Ω–∞ "–û—Ç–º–µ–Ω–∞"
    #keyboard.add(*buttons)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, handle_look_menu_response)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞

def handle_look_menu_response(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä.")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ
    
    elif message.text in object_names.values() or message.text == "–í—Å–µ –æ–±—ä–µ–∫—Ç—ã":
        look_data(message)  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç, –≤—ã–∑—ã–≤–∞–µ–º look_data
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")
        show_look_menu(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞



@bot.message_handler(commands=['look'])
def look_data(message):
    user_id = get_user_id(message.chat.id)
    if user_id:
        selected_object = message.text
        if selected_object in object_names.values():
            for key, value in object_names.items():
                if value == selected_object:
                    object_name = key
                    break
            filter_data_by_object(message, object_name)
        else:
            filter_data_by_user(message, user_id)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

def filter_data_by_object(message, object_name):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT user_id FROM items WHERE object_name = ?", (object_name,))
        user_ids = [row[0] for row in cursor.fetchall()]
        for user_id in user_ids:
            cursor.execute("SELECT i.object_name, i.message, p.file_id FROM items i LEFT JOIN photos p ON i.photo_id = p.id WHERE i.object_name = ? AND i.user_id = ?", (object_name, user_id))
            rows = cursor.fetchall()
            if rows:
                for row in rows:
                    if row[2]:
                        bot.send_photo(message.chat.id, row[2], caption=f"{row[0]}\n{row[1]}")
                    else:
                        bot.send_message(message.chat.id, f"{row[0]}\n–§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ó–∞–º–µ—á–∞–Ω–∏–µ: {row[1]}")
            else:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

def filter_data_by_user(message, user_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT i.object_name, i.message, p.file_id FROM items i LEFT JOIN photos p ON i.photo_id = p.id WHERE i.user_id = ?", (user_id,))
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                if row[2]:
                    bot.send_photo(message.chat.id, row[2], caption=f"{row[0]}\n{row[1]}")
                else:
                    bot.send_message(message.chat.id, f"{row[0]}\n–§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ó–∞–º–µ—á–∞–Ω–∏–µ: {row[1]}")
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

def get_user_id(chat_id):
    conn = get_db_connection()

    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (chat_id,))
        row = cursor.fetchone()
        if row:
            return row[0]
        else:
            return None

if __name__ == '__main__':
    create_tables()
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    while True:
        try:
            bot.polling(non_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            time.sleep(10)




#=====================================================================================================================

#–æ—à–∏–±–∫–∏ –≤ —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –≤—ã–≤–æ–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 
import os
import sqlite3
from telebot import TeleBot, types
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Optional

import logging


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')

@bot.message_handler(commands=['help', 'weather'])
def command_handler(message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!
    help - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å
    /weather - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã

    –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞
    –∑–∞–ø—É—Å–∫ –∏–ª–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –≤ menu
    """
    if message.text == '/help':
        bot.send_message(message.chat.id, command_handler.__doc__)
    elif message.text == '/weather':
        weather_link = 'https://yandex.ru/weather/?lat=63.71604156&lon=66.66759491&via=ssc'
        weather_keyboard = InlineKeyboardMarkup()
        weather_keyboard.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã", url=weather_link))
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã', reply_markup=weather_keyboard)




# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
object_names = {
    '–ü–†–°-10': '–ü–†–°-10',
    '–ü–†–°-11': '–ü–†–°-11',
    '–£–†–°-12': '–£–†–°-12',
    '–ü–†–°-13': '–ü–†–°-13',
    '–ö–°-5-7': '–ö–° 5 - 7',
    '–£—Ç—Ç –∏ –°—Ç': '–£—Ç—Ç –∏ –°—Ç'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_tables():
    conn = get_db_connection()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                chat_id INTEGER
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT UNIQUE
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_name TEXT,
                photo_id INTEGER,
                message TEXT,
                user_id INTEGER,
                FOREIGN KEY (photo_id) REFERENCES photos(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)

def add_user(username, chat_id):
    conn = get_db_connection()
    with conn:
        try:
            conn.execute("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, chat_id))
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass


def add_photo(file_id):
    conn = get_db_connection()
    with conn:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO photos (file_id) VALUES (?)", (file_id,))
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–µ–º –µ–µ ID
            cursor.execute("SELECT id FROM photos WHERE file_id = ?", (file_id,))
            return cursor.fetchone()[0]

def add_item(object_name, photo_id, message, user_id):
    conn = get_db_connection()
    try:
        with conn:
            conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                         (object_name, photo_id, message, user_id))
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            time.sleep(0.5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            with conn:
                conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                             (object_name, photo_id, message, user_id))
        else:
            raise

def get_user_id(chat_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (chat_id,))
        user = cursor.fetchone()
        return user[0] if user else None

def process_new_message(message, item_id, object_name):
    if object_name == "item":
        new_message = message.text
        update_item(item_id, new_message)
        bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        new_photo_id = get_photo_by_id(item_id)
        if message.photo:
            file_id = message.photo[-1].file_id
            update_item(item_id, None, file_id)
            bot.reply_to(message, "–§–æ—Ç–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")


def update_message(message_id, new_message):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE items SET message = ? WHERE id = ?", (new_message, message_id))

def update_item(item_id, new_message, new_file_id=None):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        if new_file_id:
            cursor.execute("UPDATE items SET message = ?, file_id = ? WHERE id = ?", (new_message, new_file_id, item_id))
        else:
            cursor.execute("UPDATE items SET message = ? WHERE id = ?", (new_message, item_id))
        conn.commit()




def delete_item(item_id):
    conn = get_db_connection()
    with conn:

        cursor = conn.cursor()
        cursor.execute("DELETE FROM items WHERE id = ?", (item_id,))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

def get_message_by_id(item_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT message FROM items WHERE id = ?", (item_id,))
        result = cursor.fetchone()
        if result:
            return result[0]
        else:
            return None

def get_object_name_by_id(item_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT object_name FROM items WHERE id = ?", (item_id,))
        result = cursor.fetchone()
        if result:
            return result[0]
        else:
            return None




def update_message_in_db(message_id, new_text):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('your_database.db')
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("UPDATE messages SET text = ? WHERE id = ?", (new_text, message_id))
        conn.commit()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise



def update_photo_in_db(photo_id, new_photo):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('your_database.db')
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        cursor.execute("UPDATE photos SET data = ? WHERE id = ?", (new_photo, photo_id))
        conn.commit()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        raise e


def get_photo_by_id(photo_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT file_id FROM photos WHERE id = ?", (photo_id,))
        result = cursor.fetchone()
        if result and result[0]:
            return result[0]
        else:
            return None




@bot.message_handler(commands=['start'])
def start(message):
    user = bot.get_chat(message.chat.id)
    user_id = get_user_id(message.chat.id)
    if not user_id:
        add_user(user.username, message.chat.id)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

def get_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in
               ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å', '–û—Ç–º–µ–Ω–∞']]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(
    func=lambda message: message.text in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'])
def handle_menu_option(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        show_object_selection(message)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        show_look_menu(message)
    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å':
        show_edit_delete_menu(message)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        start(message)

def show_object_selection(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    keyboard.add(*buttons)

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_selected_object)

def process_selected_object(message):
    selected_object = message.text
    for key, value in object_names.items():
        if value == selected_object:
            object_name = key
            break
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(msg, lambda m: process_message(m, object_name))

def process_message(message, object_name):
    message_text = message.text
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, lambda m: process_photo(m, object_name, message_text))

def process_photo(message, object_name, message_text):
    if message.photo:
        file_id = message.photo[-1].file_id
        photo_id = add_photo(file_id)
        user_id = get_user_id(message.chat.id)
        add_item(object_name, photo_id, message_text, user_id)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–º–æ–π"
        home_keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_home = types.KeyboardButton("–î–æ–º–æ–π")
        home_keyboard.add(button_home)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=home_keyboard)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π"
        bot.register_next_step_handler(message, start)
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ.")

def show_look_menu(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    buttons.append(types.KeyboardButton("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã"))
    buttons.append(types.KeyboardButton("–î–æ–º–æ–π"))
    keyboard.add(*buttons)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, look_data)
    bot.register_next_step_handler(msg, start)

def look_data(message):
    user_id = get_user_id(message.chat.id)
    if user_id:
        selected_object = message.text
        if selected_object in object_names.values():
            for key, value in object_names.items():
                if value == selected_object:
                    object_name = key
                    break
            filter_data_by_object(message, object_name)
        else:
            filter_data_by_user(message, user_id)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

def filter_data_by_object(message, object_name):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT items.message, photos.file_id "
                      "FROM items "
                      "INNER JOIN photos ON items.photo_id = photos.id "
                      "WHERE items.object_name = ? "
                      "ORDER BY items.id DESC",
                      (object_name,))
        data = cursor.fetchall()

    if data:
        for message_text, file_id in data:
            bot.send_photo(message.chat.id, file_id, caption=message_text)
    else:
        bot.send_message(message.chat.id, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_name}.")

def filter_data_by_user(message, user_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT items.object_name, items.message, photos.file_id "
                      "FROM items "
                      "INNER JOIN photos ON items.photo_id = photos.id "
                      "WHERE items.user_id = ? "
                      "ORDER BY items.id DESC",
                      (user_id,))
        data = cursor.fetchall()

    if data:
        for object_name, message_text, file_id in data:
            bot.send_photo(message.chat.id, file_id, caption=f"{object_name}: {message_text}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")


# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_edit_selection(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id, object_name –∏ user_id –∏–∑ callback_data
    item_id = int(call.data.split("_")[1])
    object_name = call.data.split("_")[2]
    user_id = call.from_user.id

    # –í—ã–∑—ã–≤–∞–µ–º process_edit_delete_selection() —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    process_edit_delete_selection(item_id, object_name, user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–û–±—ä–µ–∫—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")


def show_edit_delete_menu(message, page=1, items_per_page=1):
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = get_user_id(message.chat.id)
    if not user_id:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id, object_name, message, photo_id FROM items WHERE user_id = ? ORDER BY id LIMIT ? OFFSET ?", (user_id, items_per_page, (page - 1) * items_per_page))
        items = cursor.fetchall()

    if not items:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É
    for item in items:
        item_id, object_name, message_text, photo_id = item
        if object_name == "item":
            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(message.chat.id, message_text)
        elif object_name == "photo":
            # –í—ã–≤–æ–¥–∏–º —Ñ–æ—Ç–æ
            try:
                file_info = bot.get_file(photo_id)
                bot.send_photo(message.chat.id, file_info.file_id, caption=f"–§–æ—Ç–æ ID: {item_id}")
            except Exception as e:
                bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ç–æ ID: {item_id}. –û—à–∏–±–∫–∞: {e}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if page > 1:
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page_{page-1}"))
    if len(items) == items_per_page:
        keyboard.add(types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"page_{page+1}"))
    buttons = [types.InlineKeyboardButton(f"{item[0]} - {item[1]} - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{item[0]}_{item[1]}") for item in items]
    buttons.extend([types.InlineKeyboardButton(f"{item[0]} - {item[1]} - –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{item[0]}_{item[1]}") for item in items])
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def handle_delete(call):
    item_id, object_name = call.data.split("_")[1:]
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("DELETE FROM items WHERE id = ?", (item_id,))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    bot.send_message(call.message.chat.id, f"–ó–∞–ø–∏—Å—å —Å ID {item_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∑–∞–ø–∏—Å—è–º–∏
    show_edit_delete_menu(call.message)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("page_"))
def handle_page_navigation(call):
    page = int(call.data.split("_")[1])
    show_edit_delete_menu(call.message, page)
    bot.answer_callback_query(call.id)



@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_") or call.data.startswith("delete_"))
def handle_edit_delete_selection(call):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    action, item_id, object_name = call.data.split("_")
    item_id = int(item_id)
    user_id = call.from_user.id

    if action == "edit":
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        process_edit_selection(item_id, object_name, user_id)
    elif action == "delete":
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        process_delete_selection(item_id, object_name, user_id)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞
    bot.answer_callback_query(call.id)

def process_edit_selection(item_id, object_name, user_id):
    if object_name == "item":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = get_message_by_id(item_id)
        if message_text:
            msg = bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—É—â–∏–π: {message_text})")
            bot.register_next_step_handler(msg, update_message, item_id, message_text)
    elif object_name == "photo":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        photo_data = get_photo_by_id(item_id)
        if photo_data:
            msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ")
            bot.register_next_step_handler(msg, update_photo, item_id, photo_data)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def process_edit_delete_selection(item_id, object_name, user_id, text=None, photo_data=None):
    if object_name == "item":
        process_edit_selection(item_id, object_name, user_id, text)
    elif object_name == "photo":
        process_edit_selection(item_id, object_name, user_id, photo_data)


def process_delete_selection(item_id, object_name, user_id):
    if object_name == "item":
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        delete_item(item_id)
        bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        delete_item(item_id)
        bot.send_message(user_id, "–§–æ—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")


def update_message(new_text, item_id, object_name):
    try:
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_message_in_db(item_id, new_text)

        # –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        updated_message = get_message_by_id(item_id)
        return updated_message

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None


def update_photo(new_photo, item_id, object_name):
    try:
        # –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_photo_in_db(item_id, new_photo)

        # –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        updated_photo = get_photo_by_id(item_id)
        return updated_photo

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        return None


bot.polling()



#===========================================================================
import os
import sqlite3
from telebot import TeleBot, types
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Optional

import logging


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')

@bot.message_handler(commands=['help', 'weather'])
def command_handler(message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!
    help - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å
    /weather - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã

    –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞
    –∑–∞–ø—É—Å–∫ –∏–ª–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –≤ menu
    """
    if message.text == '/help':
        bot.send_message(message.chat.id, command_handler.__doc__)
    elif message.text == '/weather':
        weather_link = 'https://yandex.ru/weather/?lat=63.71604156&lon=66.66759491&via=ssc'
        weather_keyboard = InlineKeyboardMarkup()
        weather_keyboard.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã", url=weather_link))
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã', reply_markup=weather_keyboard)




# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
object_names = {
    '–ü–†–°-10': '–ü–†–°-10',
    '–ü–†–°-11': '–ü–†–°-11',
    '–£–†–°-12': '–£–†–°-12',
    '–ü–†–°-13': '–ü–†–°-13',
    '–ö–°-5-7': '–ö–° 5 - 7',
    '–£—Ç—Ç –∏ –°—Ç': '–£—Ç—Ç –∏ –°—Ç'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_tables():
    conn = get_db_connection()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                chat_id INTEGER
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT UNIQUE
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_name TEXT,
                photo_id INTEGER,
                message TEXT,
                user_id INTEGER,
                FOREIGN KEY (photo_id) REFERENCES photos(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)




def add_user(username, chat_id):
    conn = get_db_connection()
    with conn:
        try:
            conn.execute("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, chat_id))
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass

def add_photo(file_id):
    conn = get_db_connection()
    with conn:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO photos (file_id) VALUES (?)", (file_id,))
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–µ–º –µ–µ ID
            cursor.execute("SELECT id FROM photos WHERE file_id = ?", (file_id,))
            return cursor.fetchone()[0]

def add_item(object_name, photo_id, message, user_id):
    conn = get_db_connection()
    try:
        with conn:
            conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                         (object_name, photo_id, message, user_id))
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            time.sleep(0.5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            with conn:
                conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                             (object_name, photo_id, message, user_id))
        else:
            raise

def get_user_id(chat_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (chat_id,))
        user = cursor.fetchone()
        return user[0] if user else None

def process_new_message(message, item_id, object_name):
    if object_name == "item":
        new_message = message.text
        update_item(item_id, new_message)
        bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        new_photo_id = get_photo_by_id(item_id)
        if message.photo:
            file_id = message.photo[-1].file_id
            update_item(item_id, None, file_id)
            bot.reply_to(message, "–§–æ—Ç–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")


def update_message(message_id, new_message):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE items SET message = ? WHERE id = ?", (new_message, message_id))

def update_item(item_id, new_message, new_file_id=None):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        if new_file_id:
            cursor.execute("UPDATE items SET message = ?, file_id = ? WHERE id = ?", (new_message, new_file_id, item_id))
        else:
            cursor.execute("UPDATE items SET message = ? WHERE id = ?", (new_message, item_id))
        conn.commit()




def delete_item(item_id):
    conn = get_db_connection()
    with conn:

        cursor = conn.cursor()
        cursor.execute("DELETE FROM items WHERE id = ?", (item_id,))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

def get_message_by_id(item_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT message FROM items WHERE id = ?", (item_id,))
        result = cursor.fetchone()
        if result:
            return result[0]
        else:
            return None

def get_object_name_by_id(item_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT object_name FROM items WHERE id = ?", (item_id,))
        result = cursor.fetchone()
        if result:
            return result[0]
        else:
            return None




def update_message_in_db(message_id, new_text):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('your_database.db')
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("UPDATE messages SET text = ? WHERE id = ?", (new_text, message_id))
        conn.commit()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise e



def update_photo_in_db(photo_id, new_photo):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('your_database.db')
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        cursor.execute("UPDATE photos SET data = ? WHERE id = ?", (new_photo, photo_id))
        conn.commit()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.close()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        raise e


def get_photo_by_id(photo_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT file_id FROM photos WHERE id = ?", (photo_id,))
        result = cursor.fetchone()
        if result and result[0]:
            return result[0]
        else:
            return None




@bot.message_handler(commands=['start'])
def start(message):
    user = bot.get_chat(message.chat.id)
    user_id = get_user_id(message.chat.id)
    if not user_id:
        add_user(user.username, message.chat.id)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

def get_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in
               ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å', '–û—Ç–º–µ–Ω–∞']]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(
    func=lambda message: message.text in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'])
def handle_menu_option(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        show_object_selection(message)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        show_look_menu(message)
    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å':
        show_edit_delete_menu(message)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        start(message)

def show_object_selection(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    keyboard.add(*buttons)

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_selected_object)

def process_selected_object(message):
    selected_object = message.text
    for key, value in object_names.items():
        if value == selected_object:
            object_name = key
            break
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(msg, lambda m: process_message(m, object_name))

def process_message(message, object_name):
    message_text = message.text
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, lambda m: process_photo(m, object_name, message_text))

def process_photo(message, object_name, message_text):
    if message.photo:
        file_id = message.photo[-1].file_id
        photo_id = add_photo(file_id)
        user_id = get_user_id(message.chat.id)
        add_item(object_name, photo_id, message_text, user_id)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–º–æ–π"
        home_keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_home = types.KeyboardButton("–î–æ–º–æ–π")
        home_keyboard.add(button_home)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=home_keyboard)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π"
        bot.register_next_step_handler(message, start)
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ.")

def show_look_menu(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    buttons.append(types.KeyboardButton("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã"))
    buttons.append(types.KeyboardButton("–î–æ–º–æ–π"))
    keyboard.add(*buttons)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, look_data)
    bot.register_next_step_handler(msg, start)

def look_data(message):
    user_id = get_user_id(message.chat.id)
    if user_id:
        selected_object = message.text
        if selected_object in object_names.values():
            for key, value in object_names.items():
                if value == selected_object:
                    object_name = key
                    break
            filter_data_by_object(message, object_name)
        else:
            filter_data_by_user(message, user_id)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

def filter_data_by_object(message, object_name):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT items.message, photos.file_id "
                      "FROM items "
                      "INNER JOIN photos ON items.photo_id = photos.id "
                      "WHERE items.object_name = ? "
                      "ORDER BY items.id DESC",
                      (object_name,))
        data = cursor.fetchall()

    if data:
        for message_text, file_id in data:
            bot.send_photo(message.chat.id, file_id, caption=message_text)
    else:
        bot.send_message(message.chat.id, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_name}.")

def filter_data_by_user(message, user_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT items.object_name, items.message, photos.file_id "
                      "FROM items "
                      "INNER JOIN photos ON items.photo_id = photos.id "
                      "WHERE items.user_id = ? "
                      "ORDER BY items.id DESC",
                      (user_id,))
        data = cursor.fetchall()

    if data:
        for object_name, message_text, file_id in data:
            bot.send_photo(message.chat.id, file_id, caption=f"{object_name}: {message_text}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")


# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_edit_selection(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id, object_name –∏ user_id –∏–∑ callback_data
    item_id = int(call.data.split("_")[1])
    object_name = call.data.split("_")[2]
    user_id = call.from_user.id

    # –í—ã–∑—ã–≤–∞–µ–º process_edit_delete_selection() —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    process_edit_delete_selection(item_id, object_name, user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–û–±—ä–µ–∫—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")


def show_edit_delete_menu(message, page=1, items_per_page=1):
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = get_user_id(message.chat.id)
    if not user_id:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id, object_name, message, photo_id FROM items WHERE user_id = ? ORDER BY id LIMIT ? OFFSET ?", (user_id, items_per_page, (page - 1) * items_per_page))
        items = cursor.fetchall()

    if not items:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É
    for item in items:
        item_id, object_name, message_text, photo_id = item
        if object_name == "item":
            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(message.chat.id, message_text)
        elif object_name == "photo":
            # –í—ã–≤–æ–¥–∏–º —Ñ–æ—Ç–æ
            try:
                file_info = bot.get_file(photo_id)
                bot.send_photo(message.chat.id, file_info.file_id, caption=f"–§–æ—Ç–æ ID: {item_id}")
            except Exception as e:
                bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ç–æ ID: {item_id}. –û—à–∏–±–∫–∞: {e}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if page > 1:
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page_{page-1}"))
    if len(items) == items_per_page:
        keyboard.add(types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"page_{page+1}"))
    buttons = [types.InlineKeyboardButton(f"{item[0]} - {item[1]} - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{item[0]}_{item[1]}") for item in items]
    buttons.extend([types.InlineKeyboardButton(f"{item[0]} - {item[1]} - –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{item[0]}_{item[1]}") for item in items])
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def handle_delete(call):
    item_id, object_name = call.data.split("_")[1:]
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("DELETE FROM items WHERE id = ?", (item_id,))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    bot.send_message(call.message.chat.id, f"–ó–∞–ø–∏—Å—å —Å ID {item_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∑–∞–ø–∏—Å—è–º–∏
    show_edit_delete_menu(call.message)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("page_"))
def handle_page_navigation(call):
    page = int(call.data.split("_")[1])
    show_edit_delete_menu(call.message, page)
    bot.answer_callback_query(call.id)



@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_") or call.data.startswith("delete_"))
def handle_edit_delete_selection(call):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    action, item_id, object_name = call.data.split("_")
    item_id = int(item_id)
    user_id = call.from_user.id

    if action == "edit":
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        process_edit_selection(item_id, object_name, user_id)
    elif action == "delete":
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        process_delete_selection(item_id, object_name, user_id)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞
    bot.answer_callback_query(call.id)

def process_edit_selection(item_id, object_name, user_id):
    if object_name == "item":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = get_message_by_id(item_id)
        if message_text:
            msg = bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—É—â–∏–π: {message_text})")
            bot.register_next_step_handler(msg, update_message, item_id, message_text)
    elif object_name == "photo":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        photo_data = get_photo_by_id(item_id)
        if photo_data:
            msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ")
            bot.register_next_step_handler(msg, update_photo, item_id, photo_data)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def process_edit_delete_selection(item_id, object_name, user_id, text=None, photo_data=None):
    if object_name == "item":
        process_edit_selection(item_id, object_name, user_id, text)
    elif object_name == "photo":
        process_edit_selection(item_id, object_name, user_id, photo_data)


def process_delete_selection(item_id, object_name, user_id):
    if object_name == "item":
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        delete_item(item_id)
        bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        delete_item(item_id)
        bot.send_message(user_id, "–§–æ—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")


def update_message(new_text, item_id, object_name):
    try:
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_message_in_db(item_id, new_text)

        # –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        updated_message = get_message_by_id(item_id)
        return updated_message

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None


def update_photo(new_photo, item_id, object_name):
    try:
        # –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_photo_in_db(item_id, new_photo)

        # –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        updated_photo = get_photo_by_id(item_id)
        return updated_photo

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        return None


bot.polling()




#======================================================================================================
–Ω–µ—É–¥–∞—á–Ω—ã–π –∫–æ–¥
 
import os
import sqlite3
from telebot import TeleBot, types
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('')

# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
object_names = {
    'PRS-10': 'PRS-10',
    'PRS-11': 'PRS-11',
    'UPRS-12': 'UPRS-12',
    'PRS-13': 'PRS-13',
    'KS-5-7': 'KS 5 - 7',
    'UTT-and-ST': 'UTT and ST'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_tables():
    conn = get_db_connection()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                chat_id INTEGER
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT UNIQUE
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_name TEXT,
                photo_id INTEGER,
                message TEXT,
                user_id INTEGER,
                FOREIGN KEY (photo_id) REFERENCES photos(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)

def add_user(username, chat_id):
    conn = get_db_connection()
    with conn:
        try:
            conn.execute("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, chat_id))
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass

def add_photo(file_id):
    conn = get_db_connection()
    with conn:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO photos (file_id) VALUES (?)", (file_id,))
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–µ–º –µ–µ ID
            cursor.execute("SELECT id FROM photos WHERE file_id = ?", (file_id,))
            return cursor.fetchone()[0]

def add_item(object_name, photo_id, message, user_id):
    conn = get_db_connection()
    try:
        with conn:
            conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                         (object_name, photo_id, message, user_id))
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            time.sleep(0.5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            with conn:
                conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                             (object_name, photo_id, message, user_id))
        else:
            raise e

def get_user_id(chat_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (chat_id,))
        user = cursor.fetchone()
        return user[0] if user else None

def process_new_message(message, item_id, object_name):
    if object_name == "item":
        new_message = message.text
        update_item(item_id, new_message)
        bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        new_photo_id = get_photo_by_id(item_id)
        if message.photo:
            file_id = message.photo[-1].file_id
            update_item(item_id, None, file_id)

            bot.reply_to(message, "–§–æ—Ç–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")

        def update_item(item_id, new_message, new_photo_id=None):
            conn = get_db_connection()
            with conn:
                cursor = conn.cursor()
                if new_message is not None:
                    cursor.execute("UPDATE items SET message = ? WHERE id = ?", (new_message, item_id))
                if new_photo_id is not None:
                    cursor.execute("UPDATE items SET photo_id = ? WHERE id = ?", (new_photo_id, item_id))

def get_photo_by_id(item_id):
            conn = get_db_connection()
            with conn:
                cursor = conn.cursor()
                cursor.execute("SELECT photo_id FROM items WHERE id = ?", (item_id,))
                photo_id = cursor.fetchone()[0]
                return photo_id

def filter_data_by_object(message, object_name):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT items.message, photos.file_id "
                               "FROM items "
                               "INNER JOIN photos ON items.photo_id = photos.id "
                               "WHERE items.object_name = ? "
                               "ORDER BY items.id DESC",
                               (object_name,))
        data = cursor.fetchall()

    if data:
        for message_text, file_id in data:
            bot.send_photo(message.chat.id, file_id, caption=message_text)
    else:
                bot.send_message(message.chat.id, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_name}.")

def filter_data_by_user(message, user_id):
            conn = get_db_connection()
            with conn:
                cursor = conn.cursor()
                cursor.execute("SELECT items.object_name, items.message, photos.file_id "
                               "FROM items "
                               "INNER JOIN photos ON items.photo_id = photos.id "
                               "WHERE items.user_id = ? "
                               "ORDER BY items.id DESC",
                               (user_id,))
                data = cursor.fetchall()

            if data:
                for object_name, message_text, file_id in data:
                    bot.send_photo(message.chat.id, file_id, caption=f"{object_name}: {message_text}")
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("filter_"))
def handle_filter_selection(call):
            filter_type = call.data.split("_")[1]
            if filter_type == "object":
                object_name = call.data.split("_")[2]
                filter_data_by_object(call.message, object_name)
            elif filter_type == "user":
                user_id = get_user_id(call.from_user.id)
                filter_data_by_user(call.message, user_id)

@bot.message_handler(commands=['filter'])
def show_filter_menu(message):
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("–§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–∫—Ç—É", callback_data="filter_object"))
            markup.add(InlineKeyboardButton("–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="filter_user"))
            bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_edit_selection(call):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id, object_name –∏ user_id –∏–∑ callback_data
            item_id = int(call.data.split("_")[1])
            object_name = call.data.split("_")[2]
            user_id = call.from_user.id

            # –í—ã–∑—ã–≤–∞–µ–º process_edit_delete_selection() —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            process_edit_delete_selection(item_id, object_name, user_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–û–±—ä–µ–∫—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")

def show_edit_delete_menu(message):
            user_id = get_user_id(message.chat.id)

            if user_id:
                conn = get_db_connection()
                with conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT id, object_name, message FROM items WHERE user_id = ?", (user_id,))
                    items = cursor.fetchall()

                if items:
                    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                    buttons = [types.KeyboardButton(f"{item[0]} - {item[1]} - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å") for item in items]
                    buttons.extend([types.KeyboardButton(f"{item[0]} - {item[1]} - –£–¥–∞–ª–∏—Ç—å") for item in items])
                    buttons.append(types.KeyboardButton("–î–æ–º–æ–π"))
                    keyboard.add(*buttons)
                    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
                                           reply_markup=keyboard)
                    bot.register_next_step_handler(msg, process_edit_delete_selection)
                else:
                    bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            else:
                bot.send_message(message.chat.id,
                                 "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start(message):
            add_user(message.chat.username, message.chat.id)
            markup = InlineKeyboardMarkup()
            for object_name in object_names.values():
                markup.add(InlineKeyboardButton(object_name, callback_data=object_name))
            bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
            object_name = call.data
            user_id = get_user_id(call.message.chat.id)
            bot.send_message(chat_id=call.message.chat.id,
                             text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_names[object_name]}.")
            bot.register_next_step_handler(call.message, handle_new_item, object_name, user_id)

def handle_new_item(message, object_name, user_id):
            photo_id = None
            if message.photo:
                file_id = message.photo[-1].file_id
                photo_id = add_photo(file_id)
            add_item(object_names[object_name], photo_id, message.text, user_id)
            bot.reply_to(message, "–û–±—ä–µ–∫—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.")

@bot.message_handler(content_types=['text', 'photo'])
def handle_message(message):
            user_id = get_user_id(message.chat.id)
            if user_id is None:
                bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
            if message.edit_date:
                process_new_message(message, message.message_id, "item")
            elif message.photo:
                process_new_message(message, message.message_id, "photo")

@bot.message_handler(commands=['filter'])
def handle_filter_command(message):
            show_filter_menu(message)

def main():
    create_tables()
    bot.polling()

if __name__ == '__main__':
    main()


#=================================================================================================



#–±–∞–∑–æ–≤—ã –∫–æ–¥
#===========================================================================
#55.32
import os
import sqlite3
from telebot import TeleBot, types
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')
#bot = TeleBot('6992737528:AAEhRgiVOQOtfb0m9RCXbej74r9MP6FaOjQ')


@bot.message_handler(commands=['help', 'weather'])
def command_handler(message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!
    help - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å
    /weather - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã

    –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞
    –∑–∞–ø—É—Å–∫ –∏–ª–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –≤ menu
    """
    if message.text == '/help':
        bot.send_message(message.chat.id, command_handler.__doc__)
    elif message.text == '/weather':
        weather_link = 'https://yandex.ru/weather/?lat=63.71604156&lon=66.66759491&via=ssc'
        weather_keyboard = InlineKeyboardMarkup()
        weather_keyboard.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã", url=weather_link))
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã', reply_markup=weather_keyboard)




# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
object_names = {
    '–ü–†–°-10': '–ü–†–°-10',
    '–ü–†–°-11': '–ü–†–°-11',
    '–£–†–°-12': '–£–†–°-12',
    '–ü–†–°-13': '–ü–†–°-13',
    '–ö–°-5-7': '–ö–° 5 - 7',
    '–£—Ç—Ç –∏ –°—Ç': '–£—Ç—Ç –∏ –°—Ç',
    '–î—Ä—É–≥–∏–µ –æ–±—å–µ–∫—Ç—ã': '–î—Ä—É–≥–∏–µ –æ–±—å–µ–∫—Ç—ã'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_tables():
    conn = get_db_connection()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                chat_id INTEGER
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT UNIQUE
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_name TEXT,
                photo_id INTEGER,
                message TEXT,
                user_id INTEGER,
                FOREIGN KEY (photo_id) REFERENCES photos(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)

def add_user(username, chat_id):
    conn = get_db_connection()
    with conn:
        try:
            conn.execute("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, chat_id))
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass

def add_photo(file_id):
    conn = get_db_connection()
    with conn:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO photos (file_id) VALUES (?)", (file_id,))
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–µ–º –µ–µ ID
            cursor.execute("SELECT id FROM photos WHERE file_id = ?", (file_id,))
            return cursor.fetchone()[0]


def add_item(object_name, photo_id, message, user_id):
    conn = get_db_connection()
    try:
        with conn:
            conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                         (object_name, photo_id, message, user_id))
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            time.sleep(0.5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            with conn:
                conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)",
                             (object_name, photo_id, message, user_id))
        else:
            raise e


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user = bot.get_chat(message.chat.id)
    user_id = get_user_id(message.chat.id)
    if not user_id:
        add_user(user.username, message.chat.id)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

def get_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in ['–î–æ–±–∞–≤–∏—Ç—å',  '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–û—Ç–º–µ–Ω–∞']]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(func=lambda message: message.text in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–û—Ç–º–µ–Ω–∞'])
def handle_menu_option(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        show_object_selection(message)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        show_look_menu(message)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        start(message)

def show_object_selection(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    keyboard.add(*buttons)

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_selected_object)

def process_selected_object(message):
    selected_object = message.text
    for key, value in object_names.items():
        if value == selected_object:
            object_name = key
            break
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(msg, lambda m: process_message(m, object_name))

def process_message(message, object_name):
    message_text = message.text
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, lambda m: process_photo(m, object_name, message_text))


def process_photo(message, object_name, message_text):
    if message.photo:
        file_id = message.photo[-1].file_id
        photo_id = add_photo(file_id)
        user_id = get_user_id(message.chat.id)
        add_item(object_name, photo_id, message_text, user_id)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–º–æ–π"
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_home = types.KeyboardButton("–î–æ–º–æ–π")
        keyboard.add(button_home)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=keyboard)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π"
        bot.register_next_step_handler(message, start)
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ.")





def show_look_menu(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    buttons.append(types.KeyboardButton("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã"))
    buttons.append(types.KeyboardButton("–î–æ–º–æ–π"))
    keyboard.add(*buttons)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, look_data)
    bot.register_next_step_handler(msg, start)


@bot.message_handler(commands=['look'])
def look_data(message):
    user_id = get_user_id(message.chat.id)
    if user_id:
        selected_object = message.text
        if selected_object in object_names.values():
            for key, value in object_names.items():
                if value == selected_object:
                    object_name = key
                    break
            filter_data_by_object(message, object_name)
        else:
            filter_data_by_user(message, user_id)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

def filter_data_by_object(message, object_name):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT user_id FROM items WHERE object_name = ?", (object_name,))
        user_ids = [row[0] for row in cursor.fetchall()]
        for user_id in user_ids:
            cursor.execute("SELECT i.object_name, i.message, p.file_id FROM items i LEFT JOIN photos p ON i.photo_id = p.id WHERE i.object_name = ? AND i.user_id = ?", (object_name, user_id))
            rows = cursor.fetchall()
            if rows:
                for row in rows:
                    if row[2]:
                        bot.send_photo(message.chat.id, row[2], caption=f"{row[0]}\n{row[1]}")
                    else:
                        bot.send_message(message.chat.id, f"{row[0]}\n–§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ó–∞–º–µ—á–∞–Ω–∏–µ: {row[1]}")
            else:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

def filter_data_by_user(message, user_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT i.object_name, i.message, p.file_id FROM items i LEFT JOIN photos p ON i.photo_id = p.id WHERE i.user_id = ?", (user_id,))
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                if row[2]:
                    bot.send_photo(message.chat.id, row[2], caption=f"{row[0]}\n{row[1]}")
                else:
                    bot.send_message(message.chat.id, f"{row[0]}\n–§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ó–∞–º–µ—á–∞–Ω–∏–µ: {row[1]}")
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

def get_user_id(chat_id):
    conn = get_db_connection()

    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (chat_id,))
        row = cursor.fetchone()
        if row:
            return row[0]
        else:
            return None

if __name__ == '__main__':
    create_tables()
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    while True:
        try:
            bot.polling(non_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            time.sleep(10)



#=========================================================================

45.67

–±–∞–∑–æ–≤—ã–π –∫–æ–¥

import os
import sqlite3
from telebot import TeleBot, types

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')

# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
object_names = {
    'PRS-10': 'PRS-10',
    'PRS-11': 'PRS-11',
    'PRS-12': 'PRS-12',
    'PRS-13': 'PRS-13',
    'KS-5-7': 'KS 5 - 7',
    'UTT-and-ST': 'UTT and ST',
    'Photo': 'Photo'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_tables():
    conn = get_db_connection()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                chat_id INTEGER
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT UNIQUE
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_name TEXT,
                photo_id INTEGER,
                message TEXT,
                user_id INTEGER,
                FOREIGN KEY (photo_id) REFERENCES photos(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)

def add_user(username, chat_id):
    conn = get_db_connection()
    with conn:
        try:
            conn.execute("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, chat_id))
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass

def add_photo(file_id):
    conn = get_db_connection()
    with conn:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO photos (file_id) VALUES (?)", (file_id,))
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–µ–º –µ–µ ID
            cursor.execute("SELECT id FROM photos WHERE file_id = ?", (file_id,))
            return cursor.fetchone()[0]

def add_item(object_name, photo_id, message, user_id):
    conn = get_db_connection()
    with conn:
        conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)", (object_name, photo_id, message, user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user = bot.get_chat(message.chat.id)
    user_id = get_user_id(message.chat.id)
    if not user_id:
        add_user(user.username, message.chat.id)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

def get_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å']]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(func=lambda message: message.text in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'])
def handle_menu_option(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        show_object_selection(message)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        show_look_menu(message)

def show_object_selection(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    keyboard.add(*buttons)

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_selected_object)

def process_selected_object(message):
    selected_object = message.text
    for key, value in object_names.items():
        if value == selected_object:
            object_name = key
            break
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(msg, lambda m: process_message(m, object_name))

def process_message(message, object_name):
    message_text = message.text
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, lambda m: process_photo(m, object_name, message_text))

def process_photo(message, object_name, message_text):
    if message.photo:
        file_id = message.photo[-1].file_id
        photo_id = add_photo(file_id)
        user_id = get_user_id(message.chat.id)
        add_item(object_name, photo_id, message_text, user_id)
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ.")

def show_look_menu(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    buttons.append(types.KeyboardButton("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã"))
    keyboard.add(*buttons)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, look_data)

@bot.message_handler(commands=['look'])
def look_data(message):
    user_id = get_user_id(message.chat.id)
    if user_id:
        selected_object = message.text
        if selected_object in object_names.values():
            for key, value in object_names.items():
                if value == selected_object:
                    object_name = key
                    break
            filter_data_by_object(message, object_name)
        else:
            filter_data_by_user(message, user_id)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

def filter_data_by_object(message, object_name):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT i.object_name, i.message, p.file_id FROM items i LEFT JOIN photos p ON i.photo_id = p.id WHERE i.object_name = ? AND i.user_id = ?", (object_name, get_user_id(message.chat.id)))
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                if row[2]:
                    bot.send_photo(message.chat.id, row[2], caption=f"{row[0]}\n{row[1]}")
                else:
                    bot.send_message(message.chat.id, f"{row[0]}\n–§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ó–∞–º–µ—á–∞–Ω–∏–µ: {row[1]}")
        else:
            bot.send_message(message.chat.id, f"–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}'.")

def filter_data_by_user(message, user_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT i.object_name, i.message, p.file_id FROM items i LEFT JOIN photos p ON i.photo_id = p.id WHERE i.user_id = ?", (user_id,))
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                if row[2]:
                    bot.send_photo(message.chat.id, row[2], caption=f"{row[0]}\n{row[1]}")
                else:
                    bot.send_message(message.chat.id, f"{row[0]}\n–§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ó–∞–º–µ—á–∞–Ω–∏–µ: {row[1]}")
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

def get_user_id(chat_id):
    conn = get_db_connection()

    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (chat_id,))
        row = cursor.fetchone()
        if row:
            return row[0]
        else:
            return None

if __name__ == '__main__':
    create_tables()
    bot.polling(none_stop=True)



#===========================================================================
#7.14
#—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥, –ø–ª—è—à–∏–º –æ—Ç –Ω–µ–≥–æ


import os
import sqlite3
from telebot import TeleBot, types

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('6992737528:AAEhRgiVOQOtfb0m9RCXbej74r9MP6FaOjQ')

# –°–ª–æ–≤–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
object_names = {
    'PRS-10': 'PRS-10',
    'PRS-11': 'PRS-11',
    'PRS-12': 'PRS-12',
    'PRS-13': 'PRS-13',
    'KS-5-7': 'KS 5 - 7',
    'UTT-and-ST': 'UTT and ST',
    'Photo': 'Photo'
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_tables():
    conn = get_db_connection()
    with conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                chat_id INTEGER
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT UNIQUE
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_name TEXT,
                photo_id INTEGER,
                message TEXT,
                user_id INTEGER,
                FOREIGN KEY (photo_id) REFERENCES photos(id),
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)

def add_user(username, chat_id):
    conn = get_db_connection()
    with conn:
        try:
            conn.execute("INSERT INTO users (username, chat_id) VALUES (?, ?)", (username, chat_id))
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass

def add_photo(file_id):
    conn = get_db_connection()
    with conn:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO photos (file_id) VALUES (?)", (file_id,))
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–µ—Ä–Ω–µ–º –µ–µ ID
            cursor.execute("SELECT id FROM photos WHERE file_id = ?", (file_id,))
            return cursor.fetchone()[0]

def add_item(object_name, photo_id, message, user_id):
    conn = get_db_connection()
    with conn:
        conn.execute("INSERT INTO items (object_name, photo_id, message, user_id) VALUES (?, ?, ?, ?)", (object_name, photo_id, message, user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user = bot.get_chat(message.chat.id)
    user_id = get_user_id(message.chat.id)
    if not user_id:
        add_user(user.username, message.chat.id)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

def get_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å']]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(func=lambda message: message.text in ['–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'])
def handle_menu_option(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å':
        show_object_selection(message)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        look_data(message)

def show_object_selection(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(name) for name in object_names.values()]
    keyboard.add(*buttons)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_selected_object)


def process_selected_object(message):
    selected_object = message.text
    for key, value in object_names.items():
        if value == selected_object:
            object_name = key
            break
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(msg, lambda m: process_message(m, object_name))


def process_message(message, object_name):
    message_text = message.text
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:")
    bot.register_next_step_handler(msg, lambda m: process_photo(m, object_name, message_text))


def process_photo(message, object_name, message_text):
    if message.photo:
        file_id = message.photo[-1].file_id
        photo_id = add_photo(file_id)
        user_id = get_user_id(message.chat.id)
        add_item(object_name, photo_id, message_text, user_id)
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ.")


@bot.message_handler(commands=['look'])
def look_data(message):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT i.object_name, i.message, p.file_id FROM items i LEFT JOIN photos p ON i.photo_id = p.id WHERE i.user_id = (SELECT id FROM users WHERE chat_id = ?)",
            (message.chat.id,))
        rows = cursor.fetchall()
        if rows:
            for row in rows:
                if row[2]:
                    bot.send_photo(message.chat.id, row[2], caption=f"{row[0]}\n{row[1]}")
                else:
                    bot.send_message(message.chat.id, f"{row[0]}\n–§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ó–∞–º–µ—á–∞–Ω–∏–µ: {row[1]}")
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")


def get_user_id(chat_id):
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (chat_id,))
        row = cursor.fetchone()
        if row:
            return row[0]
        else:
            return None


if __name__ == '__main__':
    create_tables()
    bot.polling()


#=================================================================================================================
6.35
import telebot
import webbrowser
import sqlite3
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

bot = telebot.TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def get_db_connection():
    return sqlite3.connect('weather.db')

@bot.message_handler(commands=['hellp', 'weather', 'main'])
def command_handler(message):
    if message.text == '/hellp':
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!\n\n–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/hellp - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å\n/weather - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã\n\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞\n –∑–Ω–∞—á—ë–∫ —Å–∫—Ä–µ–ø–∫–∏, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–∏–ª: photo'
                                          '\n–∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Å—é–¥–∞ —Ñ–æ—Ç–æ\n –∏–∑ –≥–∞–ª–µ—Ä–µ–π —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    elif message.text == '/weather':
        weather_link = 'https://yandex.ru/weather/?lat=63.71604156&lon=66.66759491&via=ssc'
        weather_keyboard = InlineKeyboardMarkup()
        weather_keyboard.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã", url=weather_link))
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã', reply_markup=weather_keyboard)
    elif message.text == '/main':
        main(message)

@bot.message_handler(commands=['start', 'main', 'hello'])
def main(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')

@bot.message_handler(content_types=['photo'])
def weather_callback(message):
    weather_buttons = [
        types.InlineKeyboardButton('–ü–†–°-10', callback_data='weather_–ü–†–°-10'),
        types.InlineKeyboardButton('–ü–†–°-11', callback_data='weather_–ü–†–°-11'),
        types.InlineKeyboardButton('–ü–†–°-12', callback_data='weather_–ü–†–°-12'),
        types.InlineKeyboardButton('–ü–†–°-13', callback_data='weather_–ü–†–°-13'),
        types.InlineKeyboardButton('–ö–° 5 - 7', callback_data='weather_–ö–°-5-7'),
        types.InlineKeyboardButton('–£—Ç—Ç –∏ –°–¢', callback_data='weather_–£—Ç—Ç-–∏-–°–¢'),
    ]
    weather_markup = types.InlineKeyboardMarkup()
    weather_markup.add(*weather_buttons)

    callback_message = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:', reply_markup=weather_markup)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    conn = get_db_connection()
    with conn:
        cursor = conn.cursor()
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('CREATE TABLE IF NOT EXISTS weather_data(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, message TEXT, photo TEXT, data INTEGER)')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT INTO weather_data (name, message, photo, data) VALUES (?, ?, ?, ?)",
                      ('–§–æ—Ç–æ', message.text, message.photo[-1].file_id, message.date))

@bot.callback_query_handler(func=lambda call: call.data.startswith('weather_'))
def weather_action_callback(call):
    action = call.data.split('_')[1]

    if action in ['–ü–†–°-10', '–ü–†–°-11', '–ü–†–°-12', '–ü–†–°-13', '–ö–°-5-7', '–£—Ç—Ç-–∏-–°–¢']:
        weather_text = f'–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –ê–ü–ö {action}:'

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.answer_callback_query(call.id, '', show_alert=True)

        @bot.message_handler(content_types=['text'])
        def save_weather_data(message):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
            conn = get_db_connection()
            with conn:
                cursor = conn.cursor()
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

                cursor.execute("INSERT INTO weather_data (name, message, photo, data) VALUES (?, ?, ?, ?)",
                              (action, message.text, message.photo[-1].file_id if message.photo else '', message.date))
            bot.send_message(message.chat.id, '–ó–∞–º–µ—á–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')

        bot.register_next_step_handler(call.message, save_weather_data)
        bot.send_message(call.message.chat.id, weather_text)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(non_stop=True)










4.76
#============================================================================================================
import telebot
import sqlite3
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º API
bot = telebot.TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')

@bot.message_handler(commands=['hellp', 'weather'])
def command_handler(message):
    if message.text == '/hellp':
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!\n\n–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/hellp - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å\n/weather - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã\n\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞\n –∑–Ω–∞—á—ë–∫ —Å–∫—Ä–µ–ø–∫–∏, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–∏–ª: photo'
                                          '\n–∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Å—é–¥–∞ —Ñ–æ—Ç–æ\n –∏–∑ –≥–∞–ª–µ—Ä–µ–π —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    elif message.text == '/weather':
        weather_link = 'https://yandex.ru/weather/?lat=63.71604156&lon=66.66759491&via=ssc'
        weather_keyboard = InlineKeyboardMarkup()
        weather_keyboard.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ–≥–æ–¥—ã", url=weather_link))
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã', reply_markup=weather_keyboard)



#–º–µ–Ω—é –∏–∫–æ–Ω–∫–∏ commands
@bot.message_handler(commands=['start', 'main', 'hello'])
def main(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')

@bot.message_handler(commands=['hellp'])
def help(message):
    help_text = '''

#**–ö–æ–º–∞–Ω–¥—ã:**

#/weather - –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–≥–æ–¥—É
#/main - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#/hellp - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É

'''
#bot.send_message(message.chat.id, help_text, parse_mode='html')


def save_object_name(chat_id, file_id, name, comment):
    with sqlite3.connect('database.db') as connection:
        cursor = connection.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users';")
        if cursor.fetchone() is None:
            # –¢–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
            cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, file_id TEXT, name TEXT, comment TEXT)')
            connection.commit()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("INSERT INTO users (file_id, name, comment) VALUES (?, ?, ?)", (file_id, name, comment))
        connection.commit()

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    file_id = message.photo[-1].file_id
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:')
    bot.register_next_step_handler(message, handle_name, file_id)

def handle_name(message, file_id):
    name = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±—ä–µ–∫—Ç—É:')
    bot.register_next_step_handler(message, handle_comment, file_id, name)

def handle_comment(message, file_id, name):
    comment = message.text
    save_object_name(message.chat.id, file_id, name, comment)
    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')
    show_last_row(message.chat.id, 1)

def show_last_row(chat_id, page_num):
    with sqlite3.connect('database.db') as connection:
        cursor = connection.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute("SELECT COUNT(*) FROM users")
        total_rows = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_rows - 1) // 1 + 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if page_num < 1 or page_num > total_pages:
            bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.')
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–æ–ª–±—Ü—É name
        cursor.execute("SELECT * FROM users ORDER BY id DESC LIMIT 1 OFFSET ?;", ((page_num - 1) * 1,))
        row = cursor.fetchone()

        if not row:
            bot.send_message(chat_id, '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.')
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot.send_photo(chat_id, row[1])

        message_text = f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {row[2]}\n'
        message_text += f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[3]}\n\n'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        message_id = bot.send_message(chat_id, message_text).message_id

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥", "–°—Ç—Ä–∞–Ω–∏—Ü–∞" –∏ "–í–ø–µ—Ä–µ–¥"
        markup = InlineKeyboardMarkup()
        if page_num > 1:
            markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"back:{page_num - 1}"))
        markup.add(InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}", callback_data=f"page:{page_num}"))
        if page_num < total_pages:
            markup.add(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f"forward:{page_num + 1}"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("back:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)
    elif call.data.startswith("forward:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)
    elif call.data.startswith("page:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    with sqlite3.connect('database.db') as connection:
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_rows = cursor.fetchone()[0]
        total_pages = (total_rows - 1) // 1 + 1

    if call.data.startswith("back:"):
        page_num = int(call.data.split(":")[1])
        if page_num > 1:
            show_last_row(call.message.chat.id, page_num, total_pages)
    elif call.data.startswith("forward:"):
        page_num = int(call.data.split(":")[1])
        if page_num < total_pages:
            show_last_row(call.message.chat.id, page_num, total_pages)
    elif call.data.startswith("page:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num, total_pages)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    with sqlite3.connect('database.db') as connection:
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_rows = cursor.fetchone()[0]
        total_pages = (total_rows - 1) // 1 + 1

    if call.data.startswith("back:"):
        page_num = int(call.data.split(":")[1])
        if page_num > 1:
            show_last_row(call.message.chat.id, page_num, total_pages)
    elif call.data.startswith("forward:"):
        page_num = int(call.data.split(":")[1])
        if page_num < total_pages:
            show_last_row(call.message.chat.id, page_num, total_pages)
    elif call.data.startswith("page:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num, total_pages)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("back:"):
        page_num = int(call.data.split(":")[1])
        if page_num > 1:
            show_last_row(call.message.chat.id, page_num)
    elif call.data.startswith("forward:"):
        page_num = int(call.data.split(":")[1])
        total_pages = (total_rows - 1) // 1 + 1
        if page_num < total_pages:
            show_last_row(call.message.chat.id, page_num)
    elif call.data.startswith("page:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    with sqlite3.connect('database.db') as connection:
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_rows = cursor.fetchone()[0]
        total_pages = (total_rows - 1) // 1 + 1

    if call.data.startswith("back:"):
        page_num = int(call.data.split(":")[1])
        if page_num > 1:
            show_last_row(call.message.chat.id, page_num, total_pages)
    elif call.data.startswith("forward:"):
        page_num = int(call.data.split(":")[1])
        if page_num < total_pages:
            show_last_row(call.message.chat.id, page_num, total_pages)
    elif call.data.startswith("page:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num, total_pages)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("back:"):
        page_num = int(call.data.split(":")[1])
        if page_num > 1:
            show_last_row(call.message.chat.id, page_num)
    elif call.data.startswith("forward:"):
        page_num = int(call.data.split(":")[1])
        total_pages = (total_rows - 1) // 1 + 1
        if page_num < total_pages:
            show_last_row(call.message.chat.id, page_num)
    elif call.data.startswith("page:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("back:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)
    elif call.data.startswith("forward:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)
    elif call.data.startswith("page:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("back:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)
    elif call.data.startswith("forward:"):
        page_num = int(call.data.split(":")[1])
        show_last_row(call.message.chat.id, page_num)
    elif call.data == "page":
        pass  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç—Ä–∞–Ω–∏—Ü–∞"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)





3.52
#=============================================================================================
import telebot
import sqlite3
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º API
bot = telebot.TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')

def save_object_name(chat_id, file_id, name, comment):
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users';")
    if cursor.fetchone() is None:
        # –¢–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
        cursor.execute('CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, file_id TEXT, name TEXT, comment TEXT)')
        connection.commit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO users (file_id, name, comment) VALUES (?, ?, ?)", (file_id, name, comment))
    connection.commit()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    cursor.close()
    connection.close()

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    file_id = message.photo[-1].file_id
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:')
    bot.register_next_step_handler(message, handle_name, file_id)

def handle_name(message, file_id):
    name = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±—ä–µ–∫—Ç—É:')
    bot.register_next_step_handler(message, handle_comment, file_id, name)

def handle_comment(message, file_id, name):
    comment = message.text
    save_object_name(message.chat.id, file_id, name, comment)
    bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')
    show_last_row(message.chat.id, 1)

def show_last_row(chat_id, page_num):
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    cursor.execute("SELECT COUNT(*) FROM users")
    total_rows = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    cursor.execute("SELECT * FROM users ORDER BY id DESC LIMIT 1 OFFSET ?", ((page_num - 1) * 1,))
    row = cursor.fetchone()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
    if row is None:
        bot.send_message(chat_id, '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    message_text = ''
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    bot.send_photo(chat_id, row[1])

    message_text += f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {row[2]}\n'
    message_text += f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row[3]}\n\n'

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
    passed_messages = page_num * 1
    remaining_messages = total_rows - passed_messages

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥", "–°—Ç—Ä–∞–Ω–∏—Ü–∞" –∏ "–í–ø–µ—Ä–µ–¥"
    markup = InlineKeyboardMarkup()
    if page_num > 1:
        markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"back:{page_num - 1}"))
    markup.add(InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}", callback_data="page"))
    if remaining_messages > 0:
        markup.add(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f"forward:{page_num + 1}"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(chat_id, message_text, reply_markup=markup)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    cursor.close()
    connection.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("back"))
def back_button_handler(call):
    page_num = int(call.data.split(':')[1])
    show_last_row(call.message.chat.id, page_num)

@bot.callback_query_handler(func=lambda call: call.data.startswith("forward"))
def forward_button_handler(call):
    page_num = int(call.data.split(':')[1])
    show_last_row(call.message.chat.id, page_num)

@bot.callback_query_handler(func=lambda call: call.data == "page")
def page_button_handler(call):
    bot.answer_callback_query(call.id)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True)


#==============================================================
#2.17

import telebot
import sqlite3

bot = telebot.TeleBot('6625466018:AAFbUtVtlMJ6g8Oip1msrgwhWzKOxRLosiU')
name = None


@bot.message_handler(content_types=['photo'])
def photo(message):
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()

    cursor.execute('CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50), pass VARCHAR(50), file_id VARCHAR(50))')
    connection.commit()
    cursor.close()
    connection.close()

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
    bot.register_next_step_handler(message, get_name)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message, –∞ –Ω–µ –µ–≥–æ chat.id




def get_photo(message):
    file_id = message.photo[-1].file_id
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    global name
    name = message.text
    bot.send_message(message.chat.id, '–¢–≤–æ–π –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(message, get_password)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message, –∞ –Ω–µ –µ–≥–æ chat.id


def get_password(message):
    password = message.text

    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()

    cursor.execute("INSERT INTO users (name, password) VALUES (?, ?)", (name, password))
    connection.commit()
    cursor.close()
    connection.close()

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π', callback_data='users'))
    bot.send_message(message.chat.id, '–≠—Ç–æ —Ç–≤–æ–π –ª—É—á—à–∏–π –¥–µ–Ω—å!', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
def callback(call):
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()

    cursor.execute('SELECT * FROM users')
    users = cursor.fetchall()

    info = ''
    for el in users:
        info += f'–ò–º—è: {el[1]}, –ø–∞—Ä–æ–ª—å: {el[2]}\n'

    cursor.close()
    connection.close()

    bot.send_message(call.message.chat.id, info)


bot.polling(none_stop=True)


'''